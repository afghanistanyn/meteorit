#!/bin/bash

#  Copyright 2013 Daniel Giribet <dani - calidos.cat>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

### BEGIN INIT INFO
# Provides:          zookeeper
# Required-Start:    networking
# Required-Stop:     networking
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Zookeeper daemon
# Description:       Apache Zookeeper service for
#                    highly reliable distributed coordination
### END INIT INFO


retval_=0
NAME=zookeeper
mon_=${install.prefix_}/mon/bin/mon
mon_log_="/var/log/mon/mon-$NAME.log"
pidfile_="/var/run/$NAME.pid"
monpid_="/var/run/mon-$NAME.pid"
desc_="ZooKeeper daemon"
zookeeper_="${zookeeper.installfolder_}/bin/zkServer.sh start-foreground"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME


# load multiplatform init environment
. ${install.prefix_}/share/meteorit/meteorit-init-functions
load_init_env
establish_lockfile_prefix_path

lockfile_="$lockfile_prefix_path_/$NAME"

source ${zookeeper.installfolder_}/bin/zkEnv.sh

start() {
 	message_ "Starting $desc_ (zookeeper): "
	$mon_ -l "$mon_log_" -s 1  -p "$pidfile_" -m "$monpid_" -d "su - '${zookeeper.username_}' -m --session-command='sh $zookeeper_'"
  	retval_=$?
  	[ $retval_ -eq 0 ] && success_
  	[ $retval_ -ne 0 ] && failure_
	echo
  	[ $retval_ -eq 0 ] && touch "$lockfile_"
    return $retval_
}

stop() {
 	message_ "Stopping ZooKeeper daemon (zookeeper): "
 	# killproc is crossplatform :)
	killproc -p "$monpid_" -SIGTERM
  	retval_=$?
  	sleep 1
  	[ $retval_ -eq 0 ] && success_
  	[ $retval_ -ne 0 ] && failure_
  	echo
  	[ $retval_ -eq 0 ] && rm -f "$lockfile_" "$pidfile_" "$monpid_"
    return $retval_
}

restart() {
  stop
  start
}

checkstatus(){
	if [ ! -f "$pidfile_" ]; then
		echo "Zookeeper is not running (no pid file found)" && return 1
	fi
	$mon_ --pidfile "$pidfile_" -S
	retval_=$?
}

condrestart(){
  [ -e "$lockfile" ] && restart || :
}

case "$1" in
  start)
    start
    ;;
  stop)
	checkstatus || exit 0
    stop
    ;;
  status)
    checkstatus
    ;;
  restart)
    restart
    ;;
  condrestart)
    condrestart
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|condrestart}"
    exit 1
esac

exit $retval_
