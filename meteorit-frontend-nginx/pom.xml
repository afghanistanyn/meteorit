<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.calidos.dani.meteorit</groupId>
	<artifactId>meteorit-frontend-nginx</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>rpm</packaging>

	<name>Meteorit system frontend nginx component</name>
	<description>Downloads nginx and the relevant modules and compiles it onto a specific package
	</description>
    <inceptionYear>2013</inceptionYear>
    <url>http://dani.calidos.com</url>
    
    <parent>
    	<groupId>com.calidos.dani.meteorit</groupId>
		<artifactId>meteorit-compile-parent</artifactId>
		<version>1.0.0-SNAPSHOT</version>
    </parent>
    
    <properties>
    	<nginx.filename_>nginx-1.2.3</nginx.filename_>
    	<nginx.url_>http://nginx.org/download/${nginx.filename_}.tar.gz</nginx.url_>
    	<nginx.sourcefolder_>${project.build.directory}/${nginx.filename_}</nginx.sourcefolder_>
    	<nginx.tempfolder_>${project.build.directory}/${nginx.filename_}-tmp</nginx.tempfolder_>
    	<nginx.username_>nginx</nginx.username_>
    	<nginx.groupname_>${nginx.username_}</nginx.groupname_>
    	<nginx.installfolder_>${install.prefix_}/nginx</nginx.installfolder_>
    	<nginx-lua-module.url_>https://github.com/chaoslawful/lua-nginx-module/archive/v0.7.18rc2.tar.gz</nginx-lua-module.url_>
		<nginx-lua-module.name_>lua-nginx-module-0.7.18rc2</nginx-lua-module.name_>
		<nginx-lua-module.sourcefolder_>${project.build.directory}/${nginx-lua-module.name_}</nginx-lua-module.sourcefolder_>
		<lua-resty-redis.module.name_>lua-resty-redis</lua-resty-redis.module.name_>
		<lua-resty-redis.module.url_>https://github.com/agentzh/lua-resty-redis/archive/v0.15.zip</lua-resty-redis.module.url_>
		<lua-resty-redis.module.sourcefolder_>${project.build.directory}/${lua-resty-redis.module.name_}-0.15</lua-resty-redis.module.sourcefolder_>
		<lua.installfolder_>${install.prefix_}/lj2</lua.installfolder_>
		<skipPatch_>false</skipPatch_>	<!-- to skip reapplying patch -->
    </properties>
    
    <build>
    
    	 <resources>
    	 	<resource>
	    		<directory>${basedir}/src/main/bash</directory>
	    		<targetPath>${project.build.directory}</targetPath>
	    		<filtering>true</filtering>
	    	</resource>
	    	<resource>
	    		<directory>${basedir}/src/main/resources/init.d</directory>
	    		<targetPath>${project.build.outputDirectory}/init.d</targetPath>
	    		<filtering>true</filtering>
	    	</resource>
	    	<resource>
	    		<directory>${basedir}</directory>
	    		<includes>
	    			<include>LICENSE</include>
	    		</includes>
	    		<targetPath>${nginx.tempfolder_}${nginx.installfolder_}</targetPath>
	    	</resource>
	    	<resource>
	    		<directory>${basedir}/src/main/resources/conf</directory>
	    		<targetPath>${nginx.tempfolder_}${nginx.installfolder_}/conf</targetPath>
	    	</resource>
	    </resources>
    
    	<plugins>
        
            <!-- Download and expand whatever is needed -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <configuration>
                            <target>
                                <get src="${nginx.url_}" 
                                dest="${project.build.directory}/" skipexisting="true" />
                                <untar src="${project.build.directory}/${nginx.filename_}.tar.gz" 
                                dest="${project.build.directory}" compression="gzip"/>
                                <get src="${nginx-devel-kit.url_}" 
                                dest="${project.build.directory}/${nginx-devel-kit.name_}.tar.gz" skipexisting="true" />
                                <untar src="${project.build.directory}/${nginx-devel-kit.name_}.tar.gz" 
                                dest="${project.build.directory}" compression="gzip"/>
                                <get src="${nginx-lua-module.url_}" 
                                dest="${project.build.directory}/${nginx-lua-module.name_}.tar.gz" skipexisting="true" />
                                <untar src="${project.build.directory}/${nginx-lua-module.name_}.tar.gz" 
                                dest="${project.build.directory}" compression="gzip"/>
                                <get src="${lua-resty-redis.module.url_}"
                                dest="${project.build.directory}/${lua-resty-redis.module.name_}.zip" skipexisting="true" />
                                <unzip src="${project.build.directory}/${lua-resty-redis.module.name_}.zip"
                                dest="${project.build.directory}" />                                
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
		    </plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-installtest</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${nginx.tempfolder_}${nginx.installfolder_}/test</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}</directory>
									<includes>
										<include>${project.artifactId}-installtest.sh</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>	<!-- global nginx configuration patch (diff -u ./nginx-1.2.3/conf/nginx.conf ./nginx-1.2.3-tmp/opt/nginx/conf/nginx.conf) -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-patch-plugin</artifactId>
				<version>1.1.1</version>
				<configuration>
					<backups>false</backups>
					<patchFile>${basedir}/src/main/patch/nginx.conf.patch</patchFile>
					<targetDirectory>${nginx.tempfolder_}${nginx.installfolder_}/conf/</targetDirectory>
					<orginalFile>nginx.conf</orginalFile>
					<skipApplication>${skipPatch_}</skipApplication>
				</configuration>
				<executions>
					<execution>
						<id>patch</id>
						<phase>process-classes</phase>
						<goals>
							<goal>apply</goal>
						</goals>
					</execution>
				</executions>
			</plugin>



	  		<!-- package as rpm, yay -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>rpm-maven-plugin</artifactId>
                <version>2.1-alpha-2</version>
                <extensions>true</extensions>

                <configuration>
                    <packager>dani</packager>
                    <distribution>Calidos</distribution>
                    <group>Calidos/Meteorit</group>
                    <copyright>See installed LICENSE file</copyright>
                    <summary>${project.name}</summary>
                    <description>${project.description}</description>
                    <url>${project.url}</url>
                    <prefix>${install.prefix_}</prefix>
                    <needarch>x86_64</needarch>

	    			<icon />

                    <defineStatements>
                        <defineStatement>_unpackaged_files_terminate_build 0</defineStatement>
                        <defineStatement>_name ${project.artifactId}</defineStatement>
                        <defineStatement>_app ${project.artifactId}</defineStatement>
                    </defineStatements>

                    <defaultDirmode>775</defaultDirmode>
                    <defaultFilemode>664</defaultFilemode>
                    <defaultUsername>${nginx.username_}</defaultUsername>
                    <defaultGroupname>${nginx.groupname_}</defaultGroupname>
                    
                    <requires>
                    	<require>redis</require>
                    	<require>shunit2 &gt;= 2.1.6</require>
                    	<require>wget</require>    
                    	<require>meteorit-env</require>
                    </requires>
                    
                    <mappings>
                    
                    	<mapping>	<!-- nginx mappings -->
                    		<sources>
                    			<source>
                    				<location>${nginx.tempfolder_}/${nginx.installfolder_}</location>
                    			</source>
                    		</sources>
                    		<directory>${nginx.installfolder_}</directory>
                    		<recurseDirectories>false</recurseDirectories>
                    	</mapping>
                    	<mapping>	<!-- nginx binary 755 mapping -->
                    		<sources>
                    			<source>
                    				<location>${nginx.tempfolder_}/${nginx.installfolder_}/sbin/nginx</location>
                    			</source>
                    		</sources>
                    		<directory>${nginx.installfolder_}/sbin</directory>
                    		<directoryIncluded>false</directoryIncluded>
                    		<filemode>755</filemode>
                    	</mapping>
                    	<mapping>	<!-- nginx test 755 mapping -->
                    		<sources>
                    			<source>
                    				<location>${nginx.tempfolder_}/${nginx.installfolder_}/test/${project.artifactId}-installtest.sh</location>
                    			</source>
                    		</sources>
                    		<directory>${nginx.installfolder_}/test</directory>
                    		<directoryIncluded>false</directoryIncluded>
                    		<filemode>755</filemode>
                    	</mapping>
                    	<mapping>	<!-- init.d scripts, as root -->
                    		<sources>
                    			<source>
                    				<location>${project.build.outputDirectory}/init.d</location>
                    			</source>
                    		</sources>
 	                        <username>root</username>
                            <groupname>root</groupname>  
                            <filemode>755</filemode>                  		
                       		<directory>/etc/init.d</directory>  		
                       		<directoryIncluded>false</directoryIncluded>
                    	</mapping>	
                    	
                    	<mapping>	<!-- lua-resty-redis mappings: library folder -->
                    		<username>root</username>
                            <groupname>root</groupname>
							<filemode>755</filemode>
                       		<directory>${lua.installfolder_}/share/lua/5.1/resty</directory>
                    	</mapping>
                    	<mapping>	<!-- the actual .lua library -->
                    		<sources>
                    			<source>
                    				<location>${project.build.directory}/${lua-resty-redis.module.name_}-0.15/lib/resty/redis.lua</location>
                    			</source>
                    		</sources>
      						<username>root</username>
                            <groupname>root</groupname>
							<filemode>664</filemode>
                       		<directory>${lua.installfolder_}/share/lua/5.1/resty</directory>
                       		<directoryIncluded>false</directoryIncluded>
                    	</mapping>
                    </mappings>

					<preinstallScriptlet>
						<scriptFile>${project.build.directory}/preinstall.sh</scriptFile>
						<fileEncoding>utf-8</fileEncoding>
					</preinstallScriptlet>                    
					<postinstallScriptlet>
						<scriptFile>${project.build.directory}/postinstall.sh</scriptFile>
						<fileEncoding>utf-8</fileEncoding>
					</postinstallScriptlet>                    
					<preremoveScriptlet>
						<scriptFile>${project.build.directory}/preremove.sh</scriptFile>
						<fileEncoding>utf-8</fileEncoding>
					</preremoveScriptlet>                    
					<postremoveScriptlet>
						<scriptFile>${project.build.directory}/postremove.sh</scriptFile>
						<fileEncoding>utf-8</fileEncoding>
					</postremoveScriptlet>                    
			    </configuration>
		   </plugin>
	    </plugins>
	    
    </build>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<comments>Copyright (C) 2013 Daniel Giribet</comments>
		</license>
		<license>
			<name>2-clause BSD</name>
			<url>http://nginx.org/LICENSE</url>
			<comments>* Copyright (C) 2002-2012 Igor Sysoev
					  * Copyright (C) 2011-2013 Nginx, Inc.</comments>
		</license>
		<license>
			<name>BSD license (HttpLuaModule)</name>
			<url>http://wiki.nginx.org/HttpLuaModule#Copyright_and_License</url>
			<comments>Copyright (C) 2009-2013, by Xiaozhe Wang (chaoslawful) chaoslawful@gmail.com.
					  Copyright (C) 2009-2013, by Yichun "agentzh" Zhang (章亦春) agentzh@gmail.com, CloudFlare Inc.</comments>
		</license>		
		<license>
			<name>BSD license (lua-resty-redis)</name>
			<url>https://github.com/agentzh/lua-resty-redis#copyright-and-license</url>
			<comments>Copyright (C) 2012-2013, by Yichun Zhang (agentzh) agentzh@gmail.com, CloudFlare Inc.</comments>
		</license>		
				
	</licenses>	
	
</project>
	